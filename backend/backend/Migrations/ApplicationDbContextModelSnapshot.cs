// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CampaignContact", b =>
                {
                    b.Property<int>("CampaignsId")
                        .HasColumnType("int");

                    b.Property<string>("CampaignsCreatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ContactsId")
                        .HasColumnType("int");

                    b.Property<string>("ContactsOwnerUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CampaignsId", "CampaignsCreatedByUserId", "ContactsId", "ContactsOwnerUserId");

                    b.HasIndex("ContactsId", "ContactsOwnerUserId");

                    b.ToTable("CampaignContacts", (string)null);
                });

            modelBuilder.Entity("CampaignLead", b =>
                {
                    b.Property<int>("CampaignsId")
                        .HasColumnType("int");

                    b.Property<string>("CampaignsCreatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("LeadsId")
                        .HasColumnType("int");

                    b.Property<string>("LeadsCreatedBy")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CampaignsId", "CampaignsCreatedByUserId", "LeadsId", "LeadsCreatedBy");

                    b.HasIndex("LeadsId", "LeadsCreatedBy");

                    b.ToTable("CampaignLeads", (string)null);
                });

            modelBuilder.Entity("MessageUserReceiver", b =>
                {
                    b.Property<int>("MessageUserId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("MessageUserId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("MessageUserReceivers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("backend.Areas.Communication.Models.EmailMessage", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("To")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("From")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id", "To", "From");

                    b.HasIndex("From");

                    b.HasIndex("To");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("backend.Areas.Communication.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("OrganizerId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MeetingLink")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id", "OrganizerId");

                    b.HasIndex("ContactId");

                    b.HasIndex("LeadId");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("backend.Areas.Communication.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("backend.Areas.Communication.Models.MessageUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("FromId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id", "MessageId", "FromId");

                    b.HasIndex("FromId");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageUsers");
                });

            modelBuilder.Entity("backend.Areas.Communication.Models.UserMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.HasKey("Id", "UserId", "MeetingId");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMeetings");
                });

            modelBuilder.Entity("backend.Areas.Identity.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("backend.Areas.Identity.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MessageUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("backend.Areas.Identity.Models.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id", "UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("ActualCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ActualResponses")
                        .HasColumnType("int");

                    b.Property<decimal?>("ActualSales")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Budget")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ExpectedResponses")
                        .HasColumnType("int");

                    b.Property<decimal?>("ExpectedSales")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id", "CreatedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.CampaignNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id", "CampaignId", "NoteId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("NoteId");

                    b.ToTable("CampaignNotes");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.CompanyNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id", "CompanyId", "NoteId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NoteId");

                    b.ToTable("CompanyNotes");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("OwnerUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id", "OwnerUserId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.ContactNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id", "ContactId", "NoteId");

                    b.HasIndex("ContactId");

                    b.HasIndex("NoteId");

                    b.ToTable("ContactNotes");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("AssignedUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<decimal>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id", "AssignedUserId", "CreatedByUserId", "ContactId");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.JobNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id", "JobId", "NoteId");

                    b.HasIndex("JobId");

                    b.HasIndex("NoteId");

                    b.ToTable("JobNotes");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LeadAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("LeadCity")
                        .HasColumnType("longtext");

                    b.Property<string>("LeadCountry")
                        .HasColumnType("longtext");

                    b.Property<string>("LeadEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("LeadFax")
                        .HasColumnType("longtext");

                    b.Property<string>("LeadName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LeadPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LeadState")
                        .HasColumnType("longtext");

                    b.Property<string>("LeadWebsite")
                        .HasColumnType("longtext");

                    b.Property<string>("LeadZip")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id", "CreatedBy");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.LeadNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id", "LeadId", "NoteId");

                    b.HasIndex("LeadId");

                    b.HasIndex("NoteId");

                    b.ToTable("LeadNotes");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.TaskNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id", "TaskId", "NoteId");

                    b.HasIndex("NoteId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskNotes");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("AssignedToUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id", "ContactId", "CampaignId", "JobId", "AssignedToUserId", "CompanyId");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("JobId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.UserNotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id", "NoteId", "UserId");

                    b.HasIndex("NoteId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotes");
                });

            modelBuilder.Entity("backend.Areas.Utility.Models.Analytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id", "CreatedByUserId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Analytics");
                });

            modelBuilder.Entity("CampaignContact", b =>
                {
                    b.HasOne("backend.Areas.Main.Models.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignsId", "CampaignsCreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactsId", "ContactsOwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampaignLead", b =>
                {
                    b.HasOne("backend.Areas.Main.Models.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignsId", "CampaignsCreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Lead", null)
                        .WithMany()
                        .HasForeignKey("LeadsId", "LeadsCreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageUserReceiver", b =>
                {
                    b.HasOne("backend.Areas.Communication.Models.MessageUsers", null)
                        .WithMany()
                        .HasForeignKey("MessageUserId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Areas.Communication.Models.EmailMessage", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("From")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Areas.Identity.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("To")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("backend.Areas.Communication.Models.Meeting", b =>
                {
                    b.HasOne("backend.Areas.Main.Models.Contact", "Contact")
                        .WithMany("Meetings")
                        .HasForeignKey("ContactId")
                        .HasPrincipalKey("Id");

                    b.HasOne("backend.Areas.Main.Models.Lead", "Lead")
                        .WithMany("Meetings")
                        .HasForeignKey("LeadId")
                        .HasPrincipalKey("Id");

                    b.HasOne("backend.Areas.Identity.Models.User", "Organizer")
                        .WithMany("Meetings")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Lead");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("backend.Areas.Communication.Models.MessageUsers", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.User", "From")
                        .WithMany("MessageUsers")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Areas.Communication.Models.Message", "Message")
                        .WithMany("MessageUsers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("backend.Areas.Communication.Models.UserMeeting", b =>
                {
                    b.HasOne("backend.Areas.Communication.Models.Meeting", "Meeting")
                        .WithMany("UserMeetings")
                        .HasForeignKey("MeetingId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Identity.Models.User", "User")
                        .WithMany("UserMeetings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Areas.Identity.Models.UserRoles", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Identity.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Campaign", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.User", "CreatedByUser")
                        .WithMany("Campaigns")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.CampaignNotes", b =>
                {
                    b.HasOne("backend.Areas.Main.Models.Campaign", "Campaign")
                        .WithMany("CampaignNotes")
                        .HasForeignKey("CampaignId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Note", "Note")
                        .WithMany("CampaignNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.CompanyNotes", b =>
                {
                    b.HasOne("backend.Areas.Main.Models.Company", "Company")
                        .WithMany("CompanyNotes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Note", "Note")
                        .WithMany("CompanyNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Contact", b =>
                {
                    b.HasOne("backend.Areas.Main.Models.Company", "Company")
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend.Areas.Identity.Models.User", "OwnerUser")
                        .WithMany("Contacts")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.ContactNotes", b =>
                {
                    b.HasOne("backend.Areas.Main.Models.Contact", "Contact")
                        .WithMany("ContactNotes")
                        .HasForeignKey("ContactId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Note", "Note")
                        .WithMany("ContactNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Job", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.User", "AssignedUser")
                        .WithMany("AssignedJobs")
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Contact", "Contact")
                        .WithMany("Jobs")
                        .HasForeignKey("ContactId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Identity.Models.User", "CreatedByUser")
                        .WithMany("CreatedJobs")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Contact");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.JobNotes", b =>
                {
                    b.HasOne("backend.Areas.Main.Models.Job", "Job")
                        .WithMany("JobNotes")
                        .HasForeignKey("JobId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Note", "Note")
                        .WithMany("JobNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Lead", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.User", "CreatedByUser")
                        .WithMany("Leads")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.LeadNotes", b =>
                {
                    b.HasOne("backend.Areas.Main.Models.Lead", "Lead")
                        .WithMany("LeadNotes")
                        .HasForeignKey("LeadId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Note", "Note")
                        .WithMany("LeadNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.TaskNotes", b =>
                {
                    b.HasOne("backend.Areas.Main.Models.Note", "Note")
                        .WithMany("TaskNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Tasks", "Task")
                        .WithMany("TaskNotes")
                        .HasForeignKey("TaskId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Tasks", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.User", "AssignedToUser")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Campaign", "Campaign")
                        .WithMany("Tasks")
                        .HasForeignKey("CampaignId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Company", "Company")
                        .WithMany("Tasks")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Contact", "Contact")
                        .WithMany("Tasks")
                        .HasForeignKey("ContactId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Main.Models.Job", "Job")
                        .WithMany("Tasks")
                        .HasForeignKey("JobId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("Campaign");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.UserNotes", b =>
                {
                    b.HasOne("backend.Areas.Main.Models.Note", "Note")
                        .WithMany("UserNotes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Areas.Identity.Models.User", "User")
                        .WithMany("UserNotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Areas.Utility.Models.Analytic", b =>
                {
                    b.HasOne("backend.Areas.Identity.Models.User", "CreatedByUser")
                        .WithMany("Analytics")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("backend.Areas.Communication.Models.Meeting", b =>
                {
                    b.Navigation("UserMeetings");
                });

            modelBuilder.Entity("backend.Areas.Communication.Models.Message", b =>
                {
                    b.Navigation("MessageUsers");
                });

            modelBuilder.Entity("backend.Areas.Identity.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("backend.Areas.Identity.Models.User", b =>
                {
                    b.Navigation("Analytics");

                    b.Navigation("AssignedJobs");

                    b.Navigation("Campaigns");

                    b.Navigation("Contacts");

                    b.Navigation("CreatedJobs");

                    b.Navigation("Leads");

                    b.Navigation("Meetings");

                    b.Navigation("MessageUsers");

                    b.Navigation("Tasks");

                    b.Navigation("UserMeetings");

                    b.Navigation("UserNotes");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Campaign", b =>
                {
                    b.Navigation("CampaignNotes");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Company", b =>
                {
                    b.Navigation("CompanyNotes");

                    b.Navigation("Contacts");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Contact", b =>
                {
                    b.Navigation("ContactNotes");

                    b.Navigation("Jobs");

                    b.Navigation("Meetings");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Job", b =>
                {
                    b.Navigation("JobNotes");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Lead", b =>
                {
                    b.Navigation("LeadNotes");

                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Note", b =>
                {
                    b.Navigation("CampaignNotes");

                    b.Navigation("CompanyNotes");

                    b.Navigation("ContactNotes");

                    b.Navigation("JobNotes");

                    b.Navigation("LeadNotes");

                    b.Navigation("TaskNotes");

                    b.Navigation("UserNotes");
                });

            modelBuilder.Entity("backend.Areas.Main.Models.Tasks", b =>
                {
                    b.Navigation("TaskNotes");
                });
#pragma warning restore 612, 618
        }
    }
}
